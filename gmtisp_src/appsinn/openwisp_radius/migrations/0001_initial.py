# Generated by Django 4.2.7 on 2024-11-05 14:58

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import jsonfield.fields
import model_utils.fields
import openwisp_radius.base.models
import openwisp_radius.base.validators
import openwisp_radius.utils
import openwisp_users.mixins
import openwisp_utils.fields
import openwisp_utils.utils
import phonenumber_field.modelfields
import private_storage.fields
import private_storage.storage.files
import re
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Nas',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(db_column='nasname', db_index=True, help_text='NAS Name (or IP address)', max_length=128, verbose_name='name')),
                ('short_name', models.CharField(db_column='shortname', max_length=32, verbose_name='short name')),
                ('type', models.CharField(choices=[('cisco', 'Cisco Router'), ('mikrotik', 'Mikrotik'), ('Async', 'Async'), ('Sync', 'Sync'), ('ISDN Sync', 'ISDN Sync'), ('ISDN Async V.120', 'ISDN Async V.120'), ('ISDN Async V.110', 'ISDN Async V.110'), ('Virtual', 'Virtual'), ('PIAFS', 'PIAFS'), ('HDLC Clear', 'HDLC Clear'), ('Channel', 'Channel'), ('X.25', 'X.25'), ('X.75', 'X.75'), ('G.3 Fax', 'G.3 Fax'), ('SDSL', 'SDSL - Symmetric DSL'), ('ADSL-CAP', 'ADSL-CAP'), ('ADSL-DMT', 'ADSL-DMT'), ('IDSL', 'IDSL'), ('Ethernet', 'Ethernet'), ('xDSL', 'xDSL'), ('Cable', 'Cable'), ('Wireless - Other', 'Wireless - Other'), ('IEEE 802.11', 'Wireless - IEEE 802.11'), ('Token-Ring', 'Token-Ring'), ('FDDI', 'FDDI'), ('Wireless - CDMA2000', 'Wireless - CDMA2000'), ('Wireless - UMTS', 'Wireless - UMTS'), ('Wireless - 1X-EV', 'Wireless - 1X-EV'), ('IAPP', 'IAPP'), ('FTTP', 'FTTP'), ('IEEE 802.16', 'Wireless - IEEE 802.16'), ('IEEE 802.20', 'Wireless - IEEE 802.20'), ('IEEE 802.22', 'Wireless - IEEE 802.22'), ('PPPoA', 'PPPoA - PPP over ATM'), ('PPPoEoA', 'PPPoEoA - PPP over Ethernet over ATM'), ('PPPoEoE', 'PPPoEoE - PPP over Ethernet over Ethernet'), ('PPPoEoVLAN', 'PPPoEoVLAN - PPP over Ethernet over VLAN'), ('PPPoEoQinQ', 'PPPoEoQinQ - PPP over Ethernet over IEEE 802.1QinQ'), ('xPON', 'xPON - Passive Optical Network'), ('Wireless - XGP', 'Wireless - XGP'), ('WiMAX', ' WiMAX Pre-Release 8 IWK Function'), ('WIMAX-WIFI-IWK', 'WIMAX-WIFI-IWK: WiMAX WIFI Interworking'), ('WIMAX-SFF', 'WIMAX-SFF: Signaling Forwarding Function for LTE/3GPP2'), ('WIMAX-HA-LMA', 'WIMAX-HA-LMA: WiMAX HA and or LMA function'), ('WIMAX-DHCP', 'WIMAX-DHCP: WIMAX DCHP service'), ('WIMAX-LBS', 'WIMAX-LBS: WiMAX location based service'), ('WIMAX-WVS', 'WIMAX-WVS: WiMAX voice service'), ('Other', 'Other')], default='other', max_length=30, verbose_name='type')),
                ('ports', models.PositiveIntegerField(blank=True, null=True, verbose_name='ports')),
                ('secret', models.CharField(help_text='Shared Secret', max_length=60, verbose_name='secret')),
                ('server', models.CharField(blank=True, max_length=64, null=True, verbose_name='server')),
                ('community', models.CharField(blank=True, max_length=50, null=True, verbose_name='community')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='description')),
                ('gps_loc', models.CharField(blank=True, max_length=128, null=True, verbose_name='GPS location')),
            ],
            options={
                'verbose_name': 'NAS',
                'verbose_name_plural': 'NAS',
                'db_table': 'nas',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_NAS_MODEL',
            },
            bases=(openwisp_users.mixins.ValidateOrgMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OrganizationRadiusSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', openwisp_utils.fields.KeyField(default=openwisp_utils.utils.get_random_key, help_text=None, max_length=32, validators=[django.core.validators.RegexValidator(re.compile('^[^\\s/\\.]+$'), code='invalid', message='This value must not contain spaces, dots or slashes.')])),
                ('sms_verification', openwisp_utils.fields.FallbackBooleanChoiceField(blank=True, default=None, fallback=False, help_text='Whether users who sign up should be required to verify their mobile phone number via SMS', null=True, verbose_name='SMS verification')),
                ('needs_identity_verification', openwisp_utils.fields.FallbackBooleanChoiceField(blank=True, default=None, fallback=False, help_text='Whether identity verification is required at the time of user registration', null=True)),
                ('sms_sender', models.CharField(blank=True, help_text='alpha numeric identifier used as sender for SMS sent by this organization', max_length=128, null=True, verbose_name='Sender')),
                ('sms_message', openwisp_utils.fields.FallbackTextField(blank=True, fallback='{organization} verification code: {code}', help_text='SMS message template used for sending verification code. Must contain "{code}" placeholder for OTP value.', max_length=160, null=True, verbose_name='SMS Message')),
                ('sms_cooldown', openwisp_utils.fields.FallbackPositiveIntegerField(blank=True, fallback=30, help_text='Time period a user will have to wait before requesting another SMS token (in seconds).', null=True, verbose_name='SMS Cooldown')),
                ('sms_meta_data', jsonfield.fields.JSONField(blank=True, help_text='Additional configuration for SMS backend in JSON format (optional, leave blank if unsure)', null=True, verbose_name='SMS meta data')),
                ('freeradius_allowed_hosts', openwisp_utils.fields.FallbackTextField(blank=True, default='127.0.0.1,localhost,192.168.0.0/24', fallback='127.0.0.1,localhost,192.168.0.0/24', help_text='Comma separated list of IP addresses allowed to access freeradius API', null=True)),
                ('coa_enabled', openwisp_utils.fields.FallbackBooleanChoiceField(blank=True, default=None, fallback=True, help_text='Whether RADIUS Change Of Authoization (CoA) is enabled', null=True, verbose_name='CoA Enabled')),
                ('allowed_mobile_prefixes', openwisp_utils.fields.FallbackTextField(blank=True, default='+44,+39,+237,+595,+233', fallback='+44,+39,+237,+595,+233', help_text='Comma separated list of international mobile prefixes allowed to register via the user registration API.', null=True)),
                ('first_name', openwisp_utils.fields.FallbackCharChoiceField(blank=True, choices=[('disabled', 'Disabled'), ('allowed', 'Allowed'), ('mandatory', 'Mandatory')], fallback='disabled', help_text='Whether this field should be disabled, allowed or mandatory in the user registration API.', max_length=12, null=True, verbose_name='first name')),
                ('last_name', openwisp_utils.fields.FallbackCharChoiceField(blank=True, choices=[('disabled', 'Disabled'), ('allowed', 'Allowed'), ('mandatory', 'Mandatory')], fallback='disabled', help_text='Whether this field should be disabled, allowed or mandatory in the user registration API.', max_length=12, null=True, verbose_name='last name')),
                ('location', openwisp_utils.fields.FallbackCharChoiceField(blank=True, choices=[('disabled', 'Disabled'), ('allowed', 'Allowed'), ('mandatory', 'Mandatory')], fallback='disabled', help_text='Whether this field should be disabled, allowed or mandatory in the user registration API.', max_length=12, null=True, verbose_name='location')),
                ('birth_date', openwisp_utils.fields.FallbackCharChoiceField(blank=True, choices=[('disabled', 'Disabled'), ('allowed', 'Allowed'), ('mandatory', 'Mandatory')], fallback='disabled', help_text='Whether this field should be disabled, allowed or mandatory in the user registration API.', max_length=12, null=True, verbose_name='birth date')),
                ('registration_enabled', openwisp_utils.fields.FallbackBooleanChoiceField(blank=True, default=None, fallback=True, help_text='Whether the registration API endpoint should be enabled or not', null=True)),
                ('saml_registration_enabled', openwisp_utils.fields.FallbackBooleanChoiceField(blank=True, default=None, fallback=False, help_text='Whether the registration using SAML should be enabled or not', null=True, verbose_name='SAML registration enabled')),
                ('mac_addr_roaming_enabled', openwisp_utils.fields.FallbackBooleanChoiceField(blank=True, default=None, fallback=False, help_text='Whether the MAC address roaming should be enabled or not.', null=True, verbose_name='MAC address roaming enabled')),
                ('social_registration_enabled', openwisp_utils.fields.FallbackBooleanChoiceField(blank=True, default=None, fallback=False, help_text='Whether the registration using social applications should be enabled or not', null=True)),
                ('login_url', models.URLField(blank=True, help_text='Enter the URL where users can log in to the wifi service', null=True, verbose_name='Login URL')),
                ('status_url', models.URLField(blank=True, help_text='Enter the URL where users can log out from the wifi service', null=True, verbose_name='Status URL')),
                ('password_reset_url', openwisp_utils.fields.FallbackCharField(blank=True, default='http://localhost:8080/{organization}/password/reset/confirm/{uid}/{token}', fallback='http://localhost:8080/{organization}/password/reset/confirm/{uid}/{token}', help_text='Enter the URL where users can reset their password', max_length=200, null=True, validators=[openwisp_radius.base.validators.password_reset_url_validator], verbose_name='Password reset URL')),
            ],
            options={
                'verbose_name': 'Organization radius settings',
                'verbose_name_plural': 'Organization radius settings',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_ORGANIZATIONRADIUSSETTINGS_MODEL',
            },
        ),
        migrations.CreateModel(
            name='PhoneToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('valid_until', models.DateTimeField(default=openwisp_radius.utils.get_sms_default_valid_until)),
                ('attempts', models.PositiveIntegerField(default=0)),
                ('verified', models.BooleanField(default=False)),
                ('token', models.CharField(default=openwisp_radius.utils.generate_sms_token, editable=False, max_length=8)),
                ('ip', models.GenericIPAddressField()),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
            ],
            options={
                'verbose_name': 'Phone verification token',
                'verbose_name_plural': 'Phone verification tokens',
                'ordering': ('-created',),
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_PHONETOKEN_MODEL',
            },
        ),
        migrations.CreateModel(
            name='RadiusAccounting',
            fields=[
                ('session_id', models.CharField(db_column='acctsessionid', db_index=True, max_length=64, verbose_name='session ID')),
                ('unique_id', models.CharField(db_column='acctuniqueid', max_length=32, primary_key=True, serialize=False, unique=True, verbose_name='accounting unique ID')),
                ('username', models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='username')),
                ('groupname', models.CharField(blank=True, max_length=64, null=True, verbose_name='group name')),
                ('realm', models.CharField(blank=True, max_length=64, null=True, verbose_name='realm')),
                ('nas_ip_address', models.GenericIPAddressField(db_column='nasipaddress', db_index=True, verbose_name='NAS IP address')),
                ('nas_port_id', models.CharField(blank=True, db_column='nasportid', max_length=15, null=True, verbose_name='NAS port ID')),
                ('nas_port_type', models.CharField(blank=True, db_column='nasporttype', max_length=32, null=True, verbose_name='NAS port type')),
                ('start_time', models.DateTimeField(blank=True, db_column='acctstarttime', db_index=True, null=True, verbose_name='start time')),
                ('update_time', models.DateTimeField(blank=True, db_column='acctupdatetime', null=True, verbose_name='update time')),
                ('stop_time', models.DateTimeField(blank=True, db_column='acctstoptime', db_index=True, null=True, verbose_name='stop time')),
                ('interval', models.IntegerField(blank=True, db_column='acctinterval', null=True, verbose_name='interval')),
                ('session_time', models.PositiveIntegerField(blank=True, db_column='acctsessiontime', null=True, verbose_name='session time')),
                ('authentication', models.CharField(blank=True, db_column='acctauthentic', max_length=32, null=True, verbose_name='authentication')),
                ('connection_info_start', models.CharField(blank=True, db_column='connectinfo_start', max_length=50, null=True, verbose_name='connection info start')),
                ('connection_info_stop', models.CharField(blank=True, db_column='connectinfo_stop', max_length=50, null=True, verbose_name='connection info stop')),
                ('input_octets', models.BigIntegerField(blank=True, db_column='acctinputoctets', null=True, verbose_name='input octets')),
                ('output_octets', models.BigIntegerField(blank=True, db_column='acctoutputoctets', null=True, verbose_name='output octets')),
                ('called_station_id', models.CharField(blank=True, db_column='calledstationid', db_index=True, max_length=50, null=True, verbose_name='called station ID')),
                ('calling_station_id', models.CharField(blank=True, db_column='callingstationid', db_index=True, max_length=50, null=True, verbose_name='calling station ID')),
                ('terminate_cause', models.CharField(blank=True, db_column='acctterminatecause', max_length=32, null=True, verbose_name='termination cause')),
                ('service_type', models.CharField(blank=True, db_column='servicetype', max_length=32, null=True, verbose_name='service type')),
                ('framed_protocol', models.CharField(blank=True, db_column='framedprotocol', max_length=32, null=True, verbose_name='framed protocol')),
                ('framed_ip_address', models.GenericIPAddressField(blank=True, db_column='framedipaddress', null=True, verbose_name='framed IP address')),
                ('framed_ipv6_address', models.GenericIPAddressField(blank=True, db_column='framedipv6address', null=True, protocol='IPv6', verbose_name='framed IPv6 address')),
                ('framed_ipv6_prefix', models.CharField(blank=True, db_column='framedipv6prefix', max_length=44, null=True, validators=[openwisp_radius.base.validators.ipv6_network_validator], verbose_name='framed IPv6 prefix')),
                ('framed_interface_id', models.CharField(blank=True, db_column='framedinterfaceid', max_length=19, null=True, verbose_name='framed interface ID')),
                ('delegated_ipv6_prefix', models.CharField(blank=True, db_column='delegatedipv6prefix', max_length=44, null=True, validators=[openwisp_radius.base.validators.ipv6_network_validator], verbose_name='delegated IPv6 prefix')),
            ],
            options={
                'verbose_name': 'accounting',
                'verbose_name_plural': 'accountings',
                'db_table': 'radacct',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_RADIUSACCOUNTING_MODEL',
            },
            bases=(openwisp_users.mixins.ValidateOrgMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusBatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('strategy', models.CharField(choices=[('prefix', 'Generate from prefix'), ('csv', 'Import from CSV')], db_index=True, help_text='Import users from a CSV or generate using a prefix', max_length=16, verbose_name='strategy')),
                ('name', models.CharField(db_index=True, help_text='A unique batch name', max_length=128, verbose_name='name')),
                ('csvfile', private_storage.fields.PrivateFileField(blank=True, help_text='The csv file containing the user details to be uploaded', null=True, storage=private_storage.storage.files.PrivateFileSystemStorage(base_url='/api/v1/radius/organization/', location='/home/ka/Desktop/dev/django/v0/gmt_isp/gmtisp_src/gmtisp/media/private'), upload_to=openwisp_radius.base.models._get_csv_file_location, verbose_name='CSV')),
                ('prefix', models.CharField(blank=True, help_text='Usernames generated will be of the format [prefix][number]', max_length=20, null=True, verbose_name='prefix')),
                ('user_credentials', jsonfield.fields.JSONField(blank=True, null=True, verbose_name='PDF')),
                ('expiration_date', models.DateField(blank=True, help_text='If left blank users will never expire', null=True, verbose_name='expiration date')),
            ],
            options={
                'verbose_name': 'batch user creation',
                'verbose_name_plural': 'batch user creation operations',
                'db_table': 'radbatch',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_RADIUSBATCH_MODEL',
            },
            bases=(openwisp_users.mixins.ValidateOrgMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusCheck',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('username', models.CharField(blank=True, db_index=True, max_length=64, verbose_name='username')),
                ('value', models.CharField(max_length=253, verbose_name='value')),
                ('op', models.CharField(choices=[('=', '='), (':=', ':='), ('==', '=='), ('+=', '+='), ('!=', '!='), ('>', '>'), ('>=', '>='), ('<', '<'), ('<=', '<='), ('=~', '=~'), ('!~', '!~'), ('=*', '=*'), ('!*', '!*')], default=':=', max_length=2, verbose_name='operator')),
                ('attribute', models.CharField(max_length=64, verbose_name='attribute')),
            ],
            options={
                'verbose_name': 'check',
                'verbose_name_plural': 'checks',
                'db_table': 'radcheck',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_RADIUSCHECK_MODEL',
            },
            bases=(openwisp_users.mixins.ValidateOrgMixin, openwisp_radius.base.models.AutoUsernameMixin, openwisp_radius.base.models.UserAttributeValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(db_index=True, max_length=255, unique=True, verbose_name='group name')),
                ('description', models.CharField(blank=True, max_length=64, null=True, verbose_name='description')),
                ('default', models.BooleanField(default=False, help_text='The default group is automatically assigned to new users; changing the default group has only effect on new users (existing users will keep being members of their current group)', verbose_name='is default?')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_RADIUSGROUP_MODEL',
            },
            bases=(openwisp_users.mixins.ValidateOrgMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusGroupCheck',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('groupname', models.CharField(blank=True, db_index=True, max_length=64, verbose_name='group name')),
                ('attribute', models.CharField(max_length=64, verbose_name='attribute')),
                ('op', models.CharField(choices=[('=', '='), (':=', ':='), ('==', '=='), ('+=', '+='), ('!=', '!='), ('>', '>'), ('>=', '>='), ('<', '<'), ('<=', '<='), ('=~', '=~'), ('!~', '!~'), ('=*', '=*'), ('!*', '!*')], default=':=', max_length=2, verbose_name='operator')),
                ('value', models.CharField(max_length=253, verbose_name='value')),
            ],
            options={
                'verbose_name': 'group check',
                'verbose_name_plural': 'group checks',
                'db_table': 'radgroupcheck',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_RADIUSGROUPCHECK_MODEL',
            },
            bases=(openwisp_radius.base.models.AutoGroupnameMixin, openwisp_radius.base.models.GroupAttributeValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusGroupReply',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('groupname', models.CharField(blank=True, db_index=True, max_length=64, verbose_name='group name')),
                ('attribute', models.CharField(max_length=64, verbose_name='attribute')),
                ('op', models.CharField(choices=[('=', '='), (':=', ':='), ('+=', '+=')], default='=', max_length=2, verbose_name='operator')),
                ('value', models.CharField(max_length=253, verbose_name='value')),
            ],
            options={
                'verbose_name': 'group reply',
                'verbose_name_plural': 'group replies',
                'db_table': 'radgroupreply',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_RADIUSGROUPREPLY_MODEL',
            },
            bases=(openwisp_radius.base.models.AutoGroupnameMixin, openwisp_radius.base.models.GroupAttributeValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusPostAuth',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=64, verbose_name='username')),
                ('password', models.CharField(blank=True, db_column='pass', max_length=64, verbose_name='password')),
                ('reply', models.CharField(max_length=32, verbose_name='reply')),
                ('called_station_id', models.CharField(blank=True, db_column='calledstationid', max_length=50, null=True, verbose_name='called station ID')),
                ('calling_station_id', models.CharField(blank=True, db_column='callingstationid', max_length=50, null=True, verbose_name='calling station ID')),
                ('date', models.DateTimeField(auto_now_add=True, db_column='authdate', verbose_name='date')),
            ],
            options={
                'verbose_name': 'post auth',
                'verbose_name_plural': 'post auth log',
                'db_table': 'radpostauth',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_RADIUSPOSTAUTH_MODEL',
            },
            bases=(openwisp_users.mixins.ValidateOrgMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusReply',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('username', models.CharField(blank=True, db_index=True, max_length=64, verbose_name='username')),
                ('value', models.CharField(max_length=253, verbose_name='value')),
                ('op', models.CharField(choices=[('=', '='), (':=', ':='), ('+=', '+=')], default='=', max_length=2, verbose_name='operator')),
                ('attribute', models.CharField(max_length=64, verbose_name='attribute')),
            ],
            options={
                'verbose_name': 'reply',
                'verbose_name_plural': 'replies',
                'db_table': 'radreply',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_RADIUSREPLY_MODEL',
            },
            bases=(openwisp_users.mixins.ValidateOrgMixin, openwisp_radius.base.models.AutoUsernameMixin, openwisp_radius.base.models.UserAttributeValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusToken',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Key')),
                ('can_auth', models.BooleanField(default=False, help_text='Enable the radius token to be used for freeradius authorization request')),
            ],
            options={
                'verbose_name': 'radius token',
                'verbose_name_plural': 'radius token',
                'db_table': 'radiustoken',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_RADIUSTOKEN_MODEL',
            },
            bases=(openwisp_users.mixins.ValidateOrgMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RadiusUserGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('username', models.CharField(blank=True, db_index=True, max_length=64, verbose_name='username')),
                ('groupname', models.CharField(blank=True, max_length=64, verbose_name='group name')),
                ('priority', models.IntegerField(default=1, verbose_name='priority')),
            ],
            options={
                'verbose_name': 'user group',
                'verbose_name_plural': 'user groups',
                'db_table': 'radusergroup',
                'abstract': False,
                'swappable': 'OPENWISP_RADIUS_RADIUSUSERGROUP_MODEL',
            },
            bases=(openwisp_radius.base.models.AutoGroupnameMixin, openwisp_radius.base.models.AutoUsernameMixin, models.Model),
        ),
    ]
